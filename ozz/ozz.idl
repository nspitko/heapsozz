




[Internal="ozz::animation::SamplingJob"]
interface SamplingJob {
	void SamplingJob();

	[Internal="Validate"] bool validate();
	//[Internal="Run"] bool run();

	attribute float ratio;

	[CObject, Internal="samplingjob_set_animation"] void setAnimation( Animation anim );
	//attribute Animation animation;
};

interface Part {
	void Part();

	attribute float[] positions;
	int positions_count();

	int vertex_count();
	[Internal="influences_count"] int influencesCount();

};

interface Mesh {

	void Mesh();

	int triangle_index_count();
	int vertex_count();
	int max_influences_count();
	bool skinned();
	int num_joints();

	attribute short[] triangle_indices;
	[Internal="joint_remaps"] attribute short[] JointRemap;
	[Internal="joint_remap_count"] int jointRemapCount();
	[Internal="highest_joint_index"] int highestJointIndex();
	//attribute Part[] parts;

	void load( bytes data, int length );

	// Parts
	int parts_count();

	uint[] get_indices();

	bytes getRawBuffer();


};

[Internal="ozz::animation::Skeleton"]
interface Skeleton {
	void Skeleton();

	[CObject, Internal="load_skeleton"] void load( bytes data, int length );

	[Internal="num_joints"] int jointCount();
	[Internal="num_soa_joints"] int soaJointCount();

	[CObject, Internal="skeleton_num_joint_names"] int jointNameCount();
	[CObject, Internal="skeleton_get_joint_name"] bytes getJointName( int idx );


};

[Internal="ozz::animation::Animation"]
interface Animation {
	void Animation();

	[CObject, Internal="load_animation"] void load( bytes data, int length );

	[Internal="num_tracks"] int trackCount();
	[Internal="num_soa_tracks"] int soaTrackCount();
	[Get="const_char_to_vbytes"] bytes name();
	float duration();
};



interface Model {
	void Model( );
	[Internal="loadMeshes"] bool loadMeshes(bytes data, int length);
	[Internal="loadSkeleton"] bool loadSkeleton(bytes data, int length);

	bool runSamplingJob( SamplingJob job );
	float[] getSkinMatrices( int meshIndex );

	Mesh[] getMeshes();

	//attribute Skeleton skeleton;
	[Const] Skeleton getSkeleton();


};
